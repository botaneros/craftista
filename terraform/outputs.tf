# terraform/outputs.tf
output "cluster_id" {
  description = "EKS cluster ID"
  value       = aws_eks_cluster.main.id
}

output "cluster_arn" {
  description = "EKS cluster ARN"
  value       = aws_eks_cluster.main.arn
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = aws_eks_cluster.main.endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = aws_eks_cluster.main.vpc_config[0].cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = <<-EOT
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: ${aws_eks_cluster.main.certificate_authority[0].data}
        server: ${aws_eks_cluster.main.endpoint}
      name: ${aws_eks_cluster.main.arn}
    contexts:
    - context:
        cluster: ${aws_eks_cluster.main.arn}
        user: ${aws_eks_cluster.main.arn}
      name: ${aws_eks_cluster.main.arn}
    current-context: ${aws_eks_cluster.main.arn}
    kind: Config
    preferences: {}
    users:
    - name: ${aws_eks_cluster.main.arn}
      user:
        exec:
          apiVersion: client.authentication.k8s.io/v1beta1
          command: aws
          args:
            - "eks"
            - "get-token"
            - "--cluster-name"
            - "${aws_eks_cluster.main.name}"
  EOT
  sensitive = true
}

output "ecr_repositories" {
  description = "ECR repository details"
  value = {
    for k, v in aws_ecr_repository.craftista_repos : k => {
      repository_url = v.repository_url
      registry_id    = v.registry_id
    }
  }
}

output "aws_account_id" {
  description = "AWS Account ID"
  value       = data.aws_caller_identity.current.account_id
}

output "aws_region" {
  description = "AWS Region"
  value       = var.aws_region
}

output "argo_image_updater_role_arn" {
  description = "ARN of the Argo Image Updater IAM role"
  value       = aws_iam_role.argo_image_updater.arn
}